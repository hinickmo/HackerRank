Query all columns for a city in CITY with the ID 1661.
```
select *
from city
where ID = 1661;
```

Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN.
```
select *
from City
where Countrycode = 'JPN';
```

Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN.
```
select city.name
from city
where COUNTRYCODE = 'JPN';
```


Query a list of CITY and STATE from the STATION table.
```
select city, state
from station;
```

Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer.
```
SELECT DISTINCT CITY 
FROM STATION 
WHERE MOD(STATION.ID,2)=0 
ORDER BY CITY;
```'

Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.
```
SELECT COUNT(CITY) - COUNT(DISTINCT CITY)
from station;
```

Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). 
If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.
```
select city, length(city) 
from station 
order by length(city) DESC,city ASC fetch first row only;

select city, length(city) 
from station 
order by length(city) asc ,city asc fetch first row only;
```

Query the NAME field for all American cities in the CITY table with populations larger than 120000. The CountryCode for America is USA.
```
select name
from city
where countrycode = 'USA' AND population > 120000;
```

Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.
```
SELECT DISTINCT city
FROM station 
WHERE city LIKE 'A%' OR city LIKE 'E%' OR city LIKE 'I%' OR city LIKE 'O%' 
OR city LIKE 'U%';
```

Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.
```
SELECT DISTINCT(CITY) 
FROM STATION 
WHERE CITY LIKE '%a' OR CITY LIKE '%e' OR CITY LIKE '%i' OR CITY LIKE '%o' 
OR CITY LIKE '%u' 
ORDER BY CITY ASC;       
```

Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. 
Your result cannot contain duplicates.
```
SELECT DISTINCT CITY 
FROM STATION 
WHERE (CITY LIKE 'A%' OR CITY LIKE 'E%' OR CITY LIKE 'I%' OR CITY LIKE 'O%' OR CITY LIKE 'U%') AND (CITY LIKE '%a' OR CITY LIKE '%e' OR CITY LIKE '%i' OR CITY LIKE '%o' OR CITY LIKE '%u') 
order by city;      
```

Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.
```
select distinct city
from station
where(city NOT LIKE 'A%' AND CITY NOT LIKE 'E%' AND CITY NOT LIKE 'I%' AND CITY NOT LIKE'O%' AND CITY NOT LIKE'U%');
```

Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.
```
select distinct city
from station
where (CITY NOT LIKE '%a' AND city NOT LIKE '%e' AND city NOT LIKE '%i' AND city NOT LIKE '%o' AND city NOT LIKE '%u');
```

Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.
```
select distinct(city) 
from station
where (city not like "A%" AND city not like "E%" AND city not like "I%" AND city not like "O%" AND city not like "U%") OR (city not like "%a" AND city not like "%e" AND city not like "%i" AND city not like "%o" AND city not like "%u");
```

Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.
```
select distinct city
from Station
where (CITY NOT LIKE "A%" AND city not like "E%" AND city not like "I%" AND city not like "O%" AND city not like "U%" AND city not like "%a" AND city not like "%e" AND city not like "%i" AND city not like "%o" AND city not like "%u");
```

Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name. 
If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.
```
select Name
from STUDENTS
where Marks > 75
ORDER BY RIGHT(NAME, 3), ID ASC;
```

Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.
```
select name
from EMPLOYEE
ORDER BY name asc
```

Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than $2000 per month who have been employees for less than 10 months.
Sort your result by ascending employee_id.
```
SELECT name
FROM Employee
WHERE salary > 2000 AND months < 10
ORDER BY employee_id ASC;
```

Harry Potter and his friends are at Ollivander's with Ron, finally replacing Charlie's old broken wand.
Hermione decides the best way to choose is by determining the minimum number of gold galleons needed to buy each non-evil wand of high power and age.
Write a query to print the id, age, coins_needed, and power of the wands that Ron's interested in, sorted in order of descending power.
If more than one wand has same power, sort the result in order of descending age.
```
select wands.id, wands_Property.age, wands.coins_needed, wands.power 
from Wands 
join Wands_Property 
on Wands.code = Wands_Property.code
where Wands.coins_needed = (select min(coins_needed)
                       from Wands w2 inner join Wands_Property p2 
                       on w2.code = p2.code 
                       where p2.is_evil = 0 and Wands_Property.age = p2.age and wands.power = w2.power)
order by Wands.power desc, Wands_Property.age desc;
```

Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:
Equilateral: It's a triangle with  sides of equal length.
Isosceles: It's a triangle with  sides of equal length.
Scalene: It's a triangle with  sides of differing lengths.
Not A Triangle: The given values of A, B, and C don't form a triangle.
```
select case
when A+B <= C or A+C <= B or B+C <= A then "Not A Triangle"
when A=B and B=C then "Equilateral"
when A=B or A=C or B=C then "Isosceles"
else "Scalene"
end as triangles_type
from TRIANGLES;
```
Query the average population for all cities in CITY, rounded down to the nearest integer.
```
SELECT ROUND(AVG(Population)) AS AvgPopulation 
FROM City;
```

Query the average population for all cities in CITY, rounded down to the nearest integer.
```
SELECT ROUND(AVG(Population)) AS AvgPopulation 
FROM City;
```

Query a count of the number of cities in CITY having a Population larger than 100,000.
```
SELECT COUNT(Population)
FROM CITY
WHERE Population > 100000;
```

Query the total population of all cities in CITY where District is California.
```
SELECT SUM(POPULATION)
FROM CITY
WHERE DISTRICT = 'California';
```

Query the average population of all cities in CITY where District is California.
```
SELECT AVG(POPULATION)
FROM CITY
WHERE DISTRICT = 'California';
```

Query the sum of the populations for all Japanese cities in CITY. The COUNTRYCODE for Japan is JPN.
```
SELECT SUM(POPULATION)
FROM CITY
WHERE COUNTRYCODE = 'JPN';
```


Query the difference between the maximum and minimum populations in CITY.
```
SELECT MAX(Population) - MIN(Population)
FROM CITY;
```

Samantha was tasked with calculating the average monthly salaries for all employees in the EMPLOYEES table, but did not realize her keyboard's  
key was broken until after completing the calculation. She wants your help finding the difference between her miscalculation 
(using salaries with any zeros removed), and the actual average salary.
Write a query calculating the amount of error (i.e.: actual - miscalculated average monthly salaries), and round it up to the next integer.
```
select ceil(avg(salary) - avg(replace(salary, '0', ''))) 
from employees;
#ceil rounds to whole number
```

We define an employee's total earnings to be their monthly  worked, and the maximum total earnings to be the maximum total earnings for any employee in the Employee table. 
Write a query to find the maximum total earnings for all employees as well as the total number of employees who have maximum total earnings. 
Then print these values as  space-separated integers.
```
select months*salary, count(*) 
from employee
group by months*salary
order by months*salary desc
limit 1;
```

Query the following two values from the STATION table:

The sum of all values in LAT_N rounded to a scale of  decimal places.
The sum of all values in LONG_W rounded to a scale of  decimal places.
```
select round(sum(lat_n), 2), round(sum(long_w), 2) 
from station;
```


Query the sum of Northern Latitudes (LAT_N) from STATION having values greater than 38.7880 and less than 137.2345. Truncate your answer to 4 decimal places.
```
select round(sum(lat_n), 4) 
from station 
where lat_n > 38.7880 and lat_n < 137.2345;

Query the sum of Northern Latitudes (LAT_N) from STATION having values greater than 38.7880 and less than 137.2345. Truncate your answer to 4 decimal places.
```
select round(sum(lat_n), 4) 
from station 
where lat_n > 38.7880 and lat_n < 137.2345;
```


Query the greatest value of the Northern Latitudes (LAT_N) from STATION that is less than 137.2345. Truncate your answer to 4 decimal places.
```
select round(max(lat_n), 4) 
from station 
where lat_n < 137.2345;
```


Query the Western Longitude (LONG_W) for the largest Northern Latitude (LAT_N) in STATION that is less than 137.2345. Round your answer to 4 decimal places.
```
select round(long_w, 4) 
from station 
where lat_n = (select max(lat_n) 
from station
where lat_n < 137.2345);
```

Query the smallest Northern Latitude (LAT_N) from STATION that is greater than 38.7780. Round your answer to  decimal places.
```
select round(min(lat_n),4)
from station
where lat_n > 38.7780;
```

Query the Western Longitude (LONG_W)where the smallest Northern Latitude (LAT_N) in STATION is greater than 38.7780. Round your answer to 4 decimal places.
```
select round(long_w, 4) 
from station 
where lat_n = (select min(lat_n) 
from station
where lat_n > 38.7780);
```

Given the CITY and COUNTRY tables, query the sum of the populations of all cities where the CONTINENT is 'Asia'
```
select sum(city.population)
from city
join country
on city.countrycode = country.code
where Country.continent = 'Asia'
```


Given the CITY and COUNTRY tables, query the names of all cities where the CONTINENT is 'Africa'.
```
select city.name 
from city
join country
on city.countrycode = country.code
where country.continent = 'Africa'
```

Given the CITY and COUNTRY tables, query the names of all the continents (COUNTRY.Continent) and their respective average city populations (CITY.Population) rounded down to the nearest integer.
```
select country.continent, floor(avg(city.population))
from country
join city 
on city.countrycode = country.code
group by country.continent;
```



```









































